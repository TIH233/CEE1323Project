-late_aircraft_delay,
-tail_num
)
# ======================================================================================================
# encoding categorical values (one-hot: airports, cyclic: month(12), date(30), weekday(7), transformation: taxiin,out)
# Convert weekday, month, and day_of_month to cyclic features
flights_df <- flights_df %>%
mutate(
sin_weekday = sin(2 * pi * weekday / 7),
cos_weekday = cos(2 * pi * weekday / 7),
sin_month = sin(2 * pi * month / 12),
cos_month = cos(2 * pi * month / 12),
sin_day = sin(2 * pi * day_of_month / 31),
cos_day = cos(2 * pi * day_of_month / 31)
) %>%
select(-weekday, -month, -day_of_month)  # Remove the original columns
# One-hot encode the departure and destination airport codes
# although all the airports still remain in the dataframe, only top5 are of interests so only put dummy variables for them
# Create binary features for each of the top 5 airports for departure and arrival
for (airport in top_5_airports$airport_code) {
flights_df <- flights_df %>%
mutate(
!!paste0("dep_", airport) := as.integer(dep_airport_code == airport),
!!paste0("arr_", airport) := as.integer(dest_airport_code == airport)
)
}
# Now you have additional binary columns in your dataframe
# indicating if the flight is related to one of the top 5 airports
# since only one hot matrix columns are of interests, remove categorical terms
if ("dep_airport_code" %in% names(flights_df) & "dest_airport_code" %in% names(flights_df)) {
flights_df <- select(flights_df, -dep_airport_code, -dest_airport_code)
} else {
message("Columns dep_airport_code and/or dest_airport_code do not exist in the dataframe.")
}
# Log-transform taxiin and taxiout -- normalization
flights_df <- flights_df %>%
mutate(
log_taxiin = ifelse(landing_to_gate_min > 0, log(landing_to_gate_min), NA),
log_taxiout = ifelse(gate_to_takeoff_min > 0, log(gate_to_takeoff_min), NA)
) %>%
select(-landing_to_gate_min, -gate_to_takeoff_min)  # Remove the original columns
# ======================================================================================================
library(dplyr)
# Function to categorize time into day periods
categorize_time <- function(time) {
time <- sprintf("%04d", time)  # Ensure time has four digits
hours <- as.integer(substr(time, 1, 2))  # Extract hour part
# Assign time periods
if (hours >= 5 && hours < 12) {
'Morning'
} else if (hours >= 12 && hours < 17) {
'Afternoon'
} else if (hours >= 17 && hours < 21) {
'Evening'
} else {
'Night'
}
}
# Apply the categorize_time function
flights_df <- flights_df %>%
mutate(
arr_period = sapply(arr_time, categorize_time),
dep_period = sapply(dep_time, categorize_time)
) %>%
select(-arr_time, -dep_time)  # Remove the original time columns
# Add a unique prefix to the time of day encoded columns for clarity
# -- if not, it will be confused with airport encoded columns with the same name pattern "arr_|dep_" in the rellocating
# One-hot encoding the period columns
arr_period_encoded <- model.matrix(~ arr_period - 1, data = flights_df)
dep_period_encoded <- model.matrix(~ dep_period - 1, data = flights_df)
# Convert matrices to data frames
arr_period_encoded_df <- as.data.frame(arr_period_encoded)
dep_period_encoded_df <- as.data.frame(dep_period_encoded)
# Rename columns to ensure they are distinguishable
names(arr_period_encoded_df) <- paste("timearr", names(arr_period_encoded_df), sep = "_")
names(dep_period_encoded_df) <- paste("timedep", names(dep_period_encoded_df), sep = "_")
# Combine the original dataframe with the encoded dataframes
flights_df <- cbind(flights_df, arr_period_encoded_df, dep_period_encoded_df)
# Now, identify the one-hot encoded columns for the time periods
time_period_cols <- c(names(arr_period_encoded_df), names(dep_period_encoded_df))
# Move the one-hot encoded time period columns right after 'scheduled_arr_time'
# and ensure 'scheduled_arr_time' exists and is spelled correctly
flights_df <- flights_df %>%
relocate(all_of(time_period_cols), .after = "scheduled_arr_time")
# Optionally, remove the original categorical time period columns if they are no longer needed
flights_df <- select(flights_df, -arr_period, -dep_period)
# You can now view the updated dataframe structure
View(flights_df)
rm(arr_encoded, dep_encoded)
rm(arr_period_encoded, arr_period_encoded_df, dep_period_encoded, dep_period_encoded_df)
View(flights_df)
# model training
library(randomForest)
library(randomForest)
# Specify the formula to include only the relevant features
top_airport_features <- names(flights_df)[grepl("dep_|arr_", names(flights_df))]
other_features <- setdiff(names(flights_df), c("dep_airport_code", "dest_airport_code", "flight_num", "total_delay"))
model_formula <- reformulate(c(top_airport_features, other_features), response = "delay_class")
# before training, remove NA values since random forest cannot handle such values
flights_df_clean <- na.omit(flights_df)
rf_model <- randomForest(model_formula, data = flights_df_clean, importance = TRUE, ntree = 500)
# Train a Random Forest model with the specified formula
set.seed(123)  # For reproducibility
rf_model <- randomForest(model_formula, data = flights_df, importance = TRUE, ntree = 500)
install.packages("ranger")
library(ggcorrplot)
detach("package:dplyr")
View(flights_df)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/DataPreprocessing.R", echo=TRUE)
# download data from
# < http://127.0.0.1:56595/%22https://www.kaggle.com/datasets/undersc0re/flight-delay-
# and-causes/metadata?select=Flight_delay.csv%22 >
# and assign the path as a string to the local_path variable
local_path <- "C:/Users/hu437/OneDrive/Desktop/CEE_Project/Flight_delay.csv"
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/DataPreprocessing.R", echo=TRUE)
library(tidyverse)
library(janitor)
detach("package:plyr") # detaching both libraries ...
library(tidyverse)
library(janitor)
# detach("package:plyr") # detaching both libraries ...
# detach("package:dplyr")
library(plyr) # ... and loading them again to make sure
library(dplyr) # they are loaded in the right order
library(readr)
library(lubridate)
library(ggcorrplot)
library(RColorBrewer)
library(sqldf)
library(scales)
library(ggpubr)
library(ggcorrplot)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/DataPreprocessing.R", echo=TRUE)
View(flights_df)
flights_df <- flights_df %>%
mutate(
log_taxiin = ifelse(landing_to_gate_min > 0, log(landing_to_gate_min), NA),
log_taxiout = ifelse(gate_to_takeoff_min > 0, log(gate_to_takeoff_min), NA)
) %>%
select(-landing_to_gate_min, -gate_to_takeoff_min)  # Remove the original columns
# categorize time of arr and dep into three periods: morning, afternoon, evening
# the formation of time in dataset: hr+min, but the format is not standard (0500 --> 5, 0745 --> 745)
# Adjust the categorize_time function to handle 1-4 digit representations of time
categorize_time <- function(time) {
# Ensure the time is a four-digit number (HHMM format)
time <- sprintf("%04d", time)
# Extract hours as an integer
hours <- as.integer(substr(time, 1, 2))
# Define morning, afternoon, and evening based on 24-hour time
if (hours >= 5 & hours < 12) {
'Morning'
} else if (hours >= 12 & hours < 17) {
'Afternoon'
} else if (hours >= 17 & hours < 21) {
'Evening'
} else {
'Night'
}
}
# Apply the function to arrival and departure times
flights_df <- flights_df %>%
mutate(
arr_period = sapply(arr_time, categorize_time),
dep_period = sapply(dep_time, categorize_time)
) %>%
select(-arr_time, -dep_time) # Remove original time columns
View(flights_df)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/DataPreprocessing.R", echo=TRUE)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/DataPreprocessing.R", echo=TRUE)
View(flights_df)
flights_df <- flights_df %>%
select(
flight_num,
timedep_dep_periodEvening,
timedep_dep_periodNight,
WN_airline,
dep_DTW,
arr_ORD,
arr_delay,
log_taxiin,
log_taxiout,
distance_miles,
delay_class
)
flights_df <- flights_df %>%
select(
flight_num,
timedep_dep_periodEvening,
timedep_dep_periodNight,
WN_airline,
dep_DWF,
arr_ORD,
arr_delay,
log_taxiin,
log_taxiout,
distance_miles,
delay_class
)
flights_df <- flights_df %>%
select(
flight_num,
timedep_dep_periodEvening,
timedep_dep_periodNight,
WN_airline,
dep_DFW,
arr_ORD,
arr_delay,
log_taxiin,
log_taxiout,
distance_miles,
delay_class
)
# Ensure that 'delay_class' is a factor if this is a classification problem
flights_df$delay_class <- as.factor(flights_df$delay_class)
View(flights_df)
install.packages("caret")
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/R files/DataPreprocessing.R", echo=TRUE)
# Clear the workspace
rm(list = ls())
library(tidyverse)
library(janitor)
# detach("package:plyr") # detaching both libraries ...
# detach("package:dplyr")
library(plyr) # ... and loading them again to make sure
library(dplyr) # they are loaded in the right order
library(readr)
library(lubridate)
library(ggcorrplot)
library(RColorBrewer)
library(sqldf)
library(scales)
library(ggpubr)
library(ggcorrplot)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/R files/DataPreprocessing.R", echo=TRUE)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/R files/DataPreprocessing.R", echo=TRUE)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/R files/DataPreprocessing.R", echo=TRUE)
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/R files/DataPreprocessing.R", echo=TRUE)
# Clear the workspace
rm(list = ls())
library(tidyverse)
library(janitor)
# detach("package:plyr") # detaching both libraries ...
# detach("package:dplyr")
library(plyr) # ... and loading them again to make sure
library(dplyr) # they are loaded in the right order
library(readr)
library(lubridate)
library(ggcorrplot)
library(RColorBrewer)
library(sqldf)
library(scales)
library(ggpubr)
library(ggcorrplot)
# Clear the workspace
rm(list = ls())
flights_df <- read_csv(local_path)
library(ggpubr)
# Clear the workspace
rm(list = ls())
library(tidyverse)
library(janitor)
detach("package:plyr") # detaching both libraries ...
detach("package:dplyr")
library(plyr) # ... and loading them again to make sure
library(dplyr) # they are loaded in the right order
library(readr)
library(lubridate)
library(ggcorrplot)
library(RColorBrewer)
library(sqldf)
library(scales)
library(ggpubr)
library(ggcorrplot)
# need to run the code with detach commented once (or the object cannot be found later),
# then run without comment (or detach will have error)
# download data from
# < http://127.0.0.1:56595/%22https://www.kaggle.com/datasets/undersc0re/flight-delay-
# and-causes/metadata?select=Flight_delay.csv%22 >
# and assign the path as a string to the local_path variable
local_path <- "C:/Users/hu437/OneDrive/Desktop/CEE_Project/Flight_delay.csv"
flights_df <- read_csv(local_path)
# Aim to conduct EDA on the data to draw inference that help machine learning model development
# First few steps of data preprocessing is the same (cleaning, renaming, categorizing, etc.)
# mostly draw inference in context of overall population (rather than filtered data based on research interest's)
# but it is assumed that underlying pattern/ characteristics shown in the whole population is similar in the subset of interests
# Clear the workspace
rm(list = ls())
library(tidyverse)
library(janitor)
# detach("package:plyr") # detaching both libraries ...
# detach("package:dplyr")
library(plyr) # ... and loading them again to make sure
library(dplyr) # they are loaded in the right order
library(readr)
library(lubridate)
library(ggcorrplot)
library(RColorBrewer)
library(sqldf)
library(scales)
library(ggpubr)
library(ggcorrplot)
local_path <- "C:/Users/hu437/OneDrive/Desktop/CEE_Project/Flight_delay.csv"
flights_df <- read_csv(local_path)
names(flights_df) <- tolower(names(flights_df %>%
dplyr::rename(weekday = DayOfWeek,
dep_time = DepTime,
arr_time = ArrTime,
scheduled_arr_time = CRSArrTime,
uniq_carrier_code = UniqueCarrier,
flight_num = FlightNum,
tail_num = TailNum,
actual_flight_time_min = ActualElapsedTime,
estimate_flight_time_min = CRSElapsedTime,
air_time_min = AirTime,
arr_delay = ArrDelay,
dep_delay = DepDelay,
dep_airport_code = Origin,
dep_airport = Org_Airport,
dest_airport_code = Dest,
dest_airport = Dest_Airport,
distance_miles = Distance,
landing_to_gate_min = TaxiIn,
gate_to_takeoff_min =TaxiOut,
cancellation_cause_code = CancellationCode,
carrier_delay = CarrierDelay,
weather_delay = WeatherDelay,
nas_delay = NASDelay,
security_delay = SecurityDelay,
late_aircraft_delay = LateAircraftDelay)))
vector <- c()
for (i in names(flights_df)) {
if (is_double(flights_df[[i]][2]) == TRUE) {
if (sum(flights_df[i]) == 0 ) {
vector <- append(vector, i)
}
}
}
cat("the vector contains columns:", vector, sep="\n-")
flights_df <- select(flights_df, -all_of(vector))
flights_df <- mutate(flights_df,
total_delay = (carrier_delay + weather_delay + nas_delay +
security_delay + late_aircraft_delay))
library(lubridate)
flights_df <- flights_df %>% mutate(month = month(dmy(date)))
library(dplyr)
flights_df <- flights_df %>%
mutate(delay_degree = case_when(
total_delay <= 15 ~ "No delay",
total_delay >= 45 ~ "Large delay",
TRUE ~ "Medium delay"  # 'TRUE' acts as the 'else' condition
))
# check the data out :)
glimpse(flights_df)
delay_counts <- table(flights_df$delay_degree)
print(delay_counts)
# no delay is considerably less than the two other classes
barplot(delay_counts, main = "Counts of Each Delay Degree", xlab = "Delay Degree", ylab = "Count", col = "blue")
# bar plot with large vs. no+medium
ggplot(flights_df, aes(x = factor(ifelse(delay_degree %in% c("No delay", "Medium delay"), "no_medium", delay_degree)))) +
geom_bar(aes(fill = delay_degree)) +
labs(title = "Sum of No and Medium Delays vs. Large Delays", x = "Delay Category", y = "Count") +
scale_fill_manual(values = c("no_medium" = "blue", "Large delay" = "red")) +
theme_minimal()
# can be seen as balanced dataaset (no need for undersampling)
# try to find whether Arr_Delay = Carrier_Delay + Late_Aircraft_Delay (in the first few observations)
library(ggplot2)
# use ggplot to compare the sum and the Arr_Delay
ggplot(flights_df, aes(x = carrier_delay + late_aircraft_delay, y = arr_delay)) +
geom_point(alpha = 0.3) +  # Using semi-transparent points for dense scatter plots
geom_smooth(method = "lm") +  # Adds a linear regression fit line
labs(title = "Comparison of arr_delay vs. Sum of carrier and late aircraft delays",
x = "Sum of Carrier and Late Aircraft Delays",
y = "Arrival Delay") +
theme_minimal()
library(dplyr)
#
# # Attempting to use n() after explicitly grouping by a constant
# summary_df <- flights_df %>%
#   group_by(Group = 1) %>%  # Create a dummy group to avoid
#   summarise(
#     Count = n(),  # Total number of rows
#     Matches = sum(arr_delay == (carrier_delay + late_aircraft_delay)),
#     Percentage = mean(arr_delay == (carrier_delay + late_aircraft_delay)) * 100,
#     .groups = 'drop'  # Drop the grouping after summarising
#   )
# # always has error with use of n(), 'Must only be used inside data-masking verbs like `mutate()`, `filter()`, and `group_by()`.
# Calculate the total number of observations
total_count <- nrow(flights_df)
# Calculate the number of matches where 'arr_delay' equals the sum of 'carrier_delay' and 'late_aircraft_delay'
matches_count <- sum(flights_df$arr_delay == (flights_df$carrier_delay + flights_df$late_aircraft_delay))
# Calculate the percentage of matches
matches_percentage <- (matches_count / total_count) * 100
# Print results
cat("Total Count: ", total_count, "\n")
cat("Matches: ", matches_count, "\n")
cat("Percentage: ", matches_percentage, "%\n")
# 45% matches, the relationship seems to be significant but there must be other factors
# use ggplot to compare the sum and the Arr_Delay
ggplot(flights_df, aes(x = carrier_delay + late_aircraft_delay, y = arr_delay)) +
geom_point(alpha = 0.3) +  # Using semi-transparent points for dense scatter plots
geom_smooth(method = "lm") +  # Adds a linear regression fit line
labs(title = "Comparison of arr_delay vs. Sum of carrier and late aircraft delays",
x = "Sum of Carrier and Late Aircraft Delays",
y = "Arrival Delay") +
theme_minimal()
# correlation matrix
delay_data <- flights_df[, c("arr_delay", "dep_delay", "carrier_delay", "weather_delay", "nas_delay", "security_delay", "late_aircraft_delay")]
correlation_matrix <- cor(delay_data, use = "complete.obs")  # Handle missing values if necessary
# Display the correlation matrix
print(correlation_matrix)
# visualize correlation matrix in a heatmap
library(ggplot2)
library(reshape2)
correlation_matrix <- cor(flights_df[, c("arr_delay", "dep_delay", "carrier_delay", "weather_delay", "nas_delay", "security_delay", "late_aircraft_delay")], use = "pairwise.complete.obs")
# Melt the correlation matrix for visualization
melted_corr <- melt(correlation_matrix)
# Create a heatmap
ggplot(melted_corr, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +  # Draw the tiles for heatmap
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Correlation") +
theme_minimal() +
labs(title = "Heatmap of Correlation Between Delays", x = "Variables", y = "Variables") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyr)
# create histograms for some attributes to see distribution
selected_columns <- c("landing_to_gate_min", "gate_to_takeoff_min", "arr_delay", "distance_miles")
flights_df_long <- pivot_longer(flights_df, cols = selected_columns, names_to = "metric", values_to = "value")
library(ggplot2)
ggplot(flights_df_long, aes(x = value)) +
geom_histogram(bins = 30, fill = 'blue', alpha = 0.7) +
facet_wrap(~metric, scales = 'free') +
theme_minimal() +
labs(x = 'Value', y = 'Count', title = 'Histograms of Flight Metrics') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# use Z-score method to identify and handle outliers (in arr, dep delay and distance) -- further insights
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Create a temporary dataframe for Z-score calculations
flights_df_temp <- flights_df %>%
select(landing_to_gate_min, gate_to_takeoff_min, arr_delay, distance_miles) %>%
mutate(across(everything(), ~(. - mean(. , na.rm = TRUE)) / sd(. , na.rm = TRUE), .names = "z_{.col}")) %>%
pivot_longer(cols = starts_with("z_"), names_to = "variable", values_to = "z_score")
# Plotting
ggplot(flights_df_temp, aes(x = variable, y = z_score)) +
geom_boxplot() +
geom_hline(yintercept = c(-3, 3), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Z-score distribution for taxin, taxout arr_delay, and distance",
y = "Z-score",
x = "") +
coord_flip()
# Clean up (if needed, but since it's a temporary dataframe, it might not be necessary)
rm(flights_df_temp)
# This turns out to be shit-- outliers (outside red dash) are more than normal values -- highly extreme and not normal(skewness)
# very tailed distribution
# normalization, regularization, feature engineering (done and examined in data preprocessing file)
# what airline has the most delay time in the given time frame
flights_df %>%
dplyr::group_by(airline) %>%
drop_na() %>%
summarize(accumulated_delay = sum(total_delay)) %>%
arrange(-accumulated_delay)
# Soutwest seems to be the worst, but it has the highest number of flights
# # of flights for each airline
as.data.frame(table(flights_df$airline)) %>% arrange(-Freq)
# bar chart with number of flights for each airline
ggplot(flights_df) +
geom_bar(aes(x = airline), fill = "#00CC99", color = "#009933", alpha = 0.7) +
theme(axis.text.x = element_text(angle = 35, hjust = 1)) +
labs(title = "Number of Flights US Airlines",
x = "Airline", y = "Number of Flights")
# mean total delay time --> unbiased measure
# flights_df %>%
#   group_by(airline) %>%
#   drop_na() %>%
#   summarize(delay = mean(total_delay)) %>%
#   arrange(-delay)
#  only one output (not desired)
library(dplyr)
# Correctly calculate the mean total delay per airline
# Here we use dplyr::summarize (specify library) to avoid any namespace clashes
# -- function from dplyr and plyr have the same name but function differently
avg_delay_by_airline <- flights_df %>%
dplyr::group_by(airline) %>%
dplyr::summarize(delay = mean(total_delay, na.rm = TRUE), .groups = 'drop')
# Display the resulting tibble
print(avg_delay_by_airline)
# it can be seen that JetBlue Airways has highest avg delay time
# Display the resulting tibble
print(avg_delay_by_airline)
# display avg delay of airlines per month
startdate <-  min(flights_df$date)
enddate <-  max(flights_df$date)
# Calculate average delay per airline and month
ag <- flights_df %>%
dplyr::group_by(airline, month) %>%
dplyr::summarize(delay = mean(total_delay, na.rm = TRUE), .groups = 'drop')
ggplot(data=ag) +
geom_bar(aes(x = reorder(airline, -delay), y = delay, fill = airline),
stat = "identity", width = 0.6) +
labs(title = "Average Delay per Airline", subtitle = paste("From", startdate, "to", enddate),
caption = "by Markus Köfler", x = "Airlines", y = "Average Delay (min)") +
theme(axis.text.x = element_blank()) +
theme(axis.text.x = element_text(angle = 70, hjust = 1)) +
facet_wrap(~month) #  create a separate plot for each month value
# fluctuate month to month, indicating month may contribute to the delay (weather, vacation season)
# it can be seen that there is no delay for Alaska Airline in June, is it because it can achieve 0 delay during the whole month
# Or it is due to data set defects?
nrow(filter(flights_df, airline=="Alaska Airlines Inc." & month==6))
# 0 flight by the airline in June --> further research required
source("C:/Users/hu437/OneDrive/Desktop/CEE_Project/MEP/Performance_Metrics.R", echo=TRUE)
